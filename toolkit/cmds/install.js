cli.command("install", "Add a new library/component to the project", {
    alias: ["i", "add"],
})
    .option("-f --force", "Reinstall everything even if its already installed", "false")
    .action((opts) => {
        //check for all the files that end with .js.src
        //if same files with extension .js exists, skip
        //if not, copy the file with extension .js.src to .js
        if (isReejsFolder()) {
            let files = fs.readdirSync(`${process.cwd()}/libs`);
            let jsfiles = files.filter(f => f.endsWith(".js.src"));
            jsfiles.forEach(file => {
                const name = file.replace(".js.src", "");
                const dest = `${process.cwd()}/assets/libs/${name}.js`;
                if (!fs.existsSync(dest) || opts.force == "true") {
                    if (opts.force == "true" && fs.existsSync(dest)) {
                        fs.unlinkSync(dest);
                        console.log(`[INFO] Removed ${name}`);
                    }
                    if (fs.existsSync(dest)) {
                        let data = fs.readFileSync(dest, "utf8");
                        let newData = fs.readFileSync(`${process.cwd()}/libs/${file}`, "utf8");
                        newData = newData.split("\n");
                        data = data.split("\n")[1].replace("// ").split("; ");
                        let oldVersion = readConfig(data, "version");
                        let newVersion = readConfig(newData, "version");
                        let oldUrl = readConfig(data, "url");
                        let newUrl = readConfig(newData, "url");
                        if (newVersion == "latest") console.log("[WARN] Don't use @latest versions! This packages will be always updated even if no new updates happen to them.");
                        let shouldDownload = false;
                        if (oldVersion != newVersion || newVersion == "latest") shouldDownload = true;
                        if (oldUrl != newUrl) shouldDownload = true;
                        if (opts.force == "true") shouldDownload = true;
                        if (shouldDownload) {
                            console.log(`[INFO] Updating Library ${name} ${newVersion!=oldVersion?`from v${oldVersion} to v${newVersion} `:""}...`);
                            downloadFile(newUrl, dest, () => { console.log(`[SUCCESS] Downloaded Library ${name}`) });
                            //read file
                            let content = fs.readFileSync(dest, "utf8");
                            content = `// Generated by ReeToolKit at ${new Date()}; You should not edit this file, atleast not lines 1 & 2.` +
                                `\n// url:${newUrl}; version:${newVersion}\n\n` + content;
                            fs.writeFile(dest, content, "utf8");
                        }
                        else {
                            console.log(`[INFO] Download skipped for library ${name}`);
                        }
                    }
                    else {
                        let newData = fs.readFileSync(`${process.cwd()}/libs/${file}`, "utf8");
                        newData = newData.split("\n");
                        let newVersion = readConfig(newData, "version");
                        let newUrl = readConfig(newData, "url");
                        console.log(`[INFO] Downloading Library ${name} ...`);
                        downloadFile(newUrl, dest, () => { console.log(`[SUCCESS] Downloaded Library ${name}`) });
                        //read file
                        let content = fs.readFileSync(dest, "utf8");
                        content = `// Generated by ReeToolKit at ${new Date()}; You should not edit this file, atleast not lines 1 & 2.` +
                            `\n// url:${newUrl}; version:${newVersion}\n\n` + content;
                        fs.writeFile(dest, content, "utf8");
                    }
                }
            });
        }
        else {
            console.log("[WARN] You are not in a Reejs folder");
        }
    })