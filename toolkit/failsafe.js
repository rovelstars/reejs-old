#!/usr/bin/env node
//This is the file that installs the dependencies for the toolkit so toolkit can be used. Exactly follows the specification of cmds/install.js

//polyfills

import { get } from 'https';
import fs from "fs";
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const pkg = JSON.parse(fs.readFileSync(`${__dirname}/package.json`, "utf8"));
import {homedir,platform} from "os";
let home = homedir();
let os = platform();
let homewin;
if (os == "win32") {
    homewin = home;
    home = home.replace(/\\/g, "/");
}
let dir = `${home}/.reejs`;

function logger(msg, lvl = "DEBUG") {
    lvl = lvl.toUpperCase();
    console.log(`[${lvl}] ${msg}`);
}
function readConfig(arr, word) {
    let e = arr.filter((l) => {
        return l.split(":")[0] == word;
    });
    if (e?.length) return e[0].replace(`${word}:`, "");
    else return undefined;
}
function isReejsFolder() {
    return true;
}
function downloadFile(url, dest, cb) {
    var file = fs.createWriteStream(dest);
    get(url, function(response) {
      response.pipe(file);
      file.on('finish', function() {
        file.close(cb);
      });
    });
  }
console.log("[FAILSAFE] Installing dependencies for toolkit...");
//polyfills end

if (isReejsFolder()) {
    if (!fs.existsSync(`${process.cwd()}/assets/libs/`)) {
        console.log("[INFO] Creating assets folder");
        fs.mkdirSync(`${process.cwd()}/assets`);
        fs.mkdirSync(`${process.cwd()}/assets/libs`);
    }
    let files = fs.readdirSync(`${process.cwd()}/libs`);
    let jsfiles = files.filter(f => f.endsWith(".js.src"));
    jsfiles.forEach(file => {
        const name = file.replace(".js.src", "");
        const dest = `${process.cwd()}/assets/libs/${name}.js`;
        if (!fs.existsSync(dest) || opts.force == "true") {
            if (opts.force == "true" && fs.existsSync(dest)) {
                fs.unlinkSync(dest);
                console.log(`[INFO] Removed ${name}`);
            }
            if (fs.existsSync(dest)) {
                let data = fs.readFileSync(dest, "utf8");
                let newData = fs.readFileSync(`${process.cwd()}/libs/${file}`, "utf8");
                newData = newData.split("\n");
                data = data.split("\n")[1].replace("// ").split("; ");
                let oldVersion = readConfig(data, "version");
                let newVersion = readConfig(newData, "version");
                let oldUrl = readConfig(data, "url");
                let newUrl = readConfig(newData, "url");
                if (newVersion == "latest") console.log("[WARN] Don't use @latest versions! This packages will be always updated even if no new updates happen to them.");
                let shouldDownload = false;
                if (oldVersion != newVersion || newVersion == "latest") shouldDownload = true;
                if (oldUrl != newUrl) shouldDownload = true;
                if (opts.force == "true") shouldDownload = true;
                if (shouldDownload) {
                    console.log(`[INFO] Updating Library ${name} ${newVersion != oldVersion ? `from v${oldVersion} to v${newVersion} ` : ""}...`);
                    downloadFile(newUrl, dest, () => { console.log(`[SUCCESS] Updated Library ${name}`) });
                    //read file
                    let content = fs.readFileSync(dest, "utf8");
                    content = `// Generated by ReeToolKit at ${new Date()}; You should not edit this file, atleast not lines 1 & 2.` +
                        `\n// url:${newUrl}; version:${newVersion}\n\n` + content;
                    fs.writeFile(dest, content, "utf8");
                }
                else {
                    console.log(`[INFO] Download skipped for library ${name}`);
                }
            }
            else {
                let newData = fs.readFileSync(`${process.cwd()}/libs/${file}`, "utf8");
                newData = newData.split("\n");
                let newVersion = readConfig(newData, "version");
                let newUrl = readConfig(newData, "url");
                console.log(`[INFO] Downloading Library ${name} ...`);
                downloadFile(newUrl, dest, () => {
                    console.log(`[SUCCESS] Downloaded Library ${name}`);
                    //read file
                    let content = fs.readFileSync(dest, "utf8");
                    content = `// Generated by ReeToolKit at ${new Date()}; You should not edit this file, atleast not lines 1 & 2.` +
                        `\n// url:${newUrl}; version:${newVersion}\n\n` + content;
                    fs.writeFileSync(dest, content);
                });
            }
        }
    });
}
else {
    console.log("[WARN] You are not in a Reejs folder");
}